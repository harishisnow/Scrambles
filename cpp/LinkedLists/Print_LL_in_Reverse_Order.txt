/******************************************************************************

            Print Single Linked List in reverse order

*******************************************************************************/


#include <iostream>

using namespace std;

struct Node {
    int data;
    Node *next;
};

void insertAtEnd(Node **head, int data) {
    Node *node = (struct Node *)malloc(sizeof(Node));
    node->data = data;
    node->next = NULL;
    if (*head == NULL) {
        *head = node;
        return;
    }
    else {
        Node *curr = *head;
        while (curr->next) {
            curr = curr->next;
        }
        curr->next = node;
    }
    return;
}

void reverseListIterative(Node **head) {
    Node *prev = NULL;
    Node *curr = *head;
    Node *next = NULL;
    
    while (curr) {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }
    *head = prev;
}

void printList(Node **head) {
    Node *curr = *head;
    int count = 0;
    if (curr == NULL) {
        cout << "List is Empty!!" << endl;
    }
    else {
        while (curr && count < 20) {
            cout << curr->data << " ";
            curr = curr->next;
            count++;
        }
    }
}

void printListReverse(Node **head) {
    Node *curr = *head;
    if (curr == NULL) {
        return;
    }
    printListReverse(&(curr->next));
    cout << curr->data << " ";
}


int main()
{
    Node *head = NULL;
    insertAtEnd(&head, 4);
    insertAtEnd(&head, 5);
    insertAtEnd(&head, 6);
    insertAtEnd(&head, 7);
    insertAtEnd(&head, 8);
    insertAtEnd(&head, 9);
    insertAtEnd(&head, 10);
    insertAtEnd(&head, 11);
    insertAtEnd(&head, 12);
    
  //  reverseListIterative(&head);
    
    printList(&head);
    
    cout << endl << endl;
    
    printListReverse(&head);
    

    return 0;
}

