/******************************************************************************

                             Insert element into a sorted Linked List

*******************************************************************************/

#include <iostream>
#include <map>

using namespace std;

struct Node {
    int data;
    Node *next;
};

void insertAtEnd(Node **head, int data) {
    Node *node = (struct Node *)malloc(sizeof(Node));
    node->data = data;
    node->next = NULL;
    if (*head == NULL) {
        *head = node;
        return;
    }
    else {
        Node *curr = *head;
        while (curr->next) {
            curr = curr->next;
        }
        curr->next = node;
    }
    return;
}

void printList(Node **head) {
    Node *curr = *head;
    int count = 0;
    if (curr == NULL) {
        cout << "List is Empty!!" << endl;
    }
    else {
        while (curr && count < 20) {
            cout << curr->data << " ";
            curr = curr->next;
            count++;
        }
    }
}

void insertIntoSortedList(Node **head, int data) {
    Node *nd = (struct Node *)malloc(sizeof(Node));
    nd->data = data;
    
    if (data <= (*head)->data) {
        nd->next = *head;
        return;
    }

    Node *curr = *head;
    Node *prev;
    int flag = 0;
    while(curr) {
        prev = curr;
        curr = curr->next;
        if (data > prev->data && data < curr->data) {
            prev->next = nd;
            nd->next = curr;
            flag = 1;
        }
    }
 
    if (flag == 0) {
        curr->next = nd;
        nd->next = NULL;
    }
 
    return;
}
int main()
{
    Node *head = NULL;
    map<int, int> mp;
    insertAtEnd(&head, 4);
    insertAtEnd(&head, 5);
    insertAtEnd(&head, 6);
    insertAtEnd(&head, 7);
    insertAtEnd(&head, 8);
 //   insertAtEnd(&head, 9);
    insertAtEnd(&head, 10);
    insertAtEnd(&head, 11);
    insertAtEnd(&head, 12);
    
    insertIntoSortedList(&head, 9);
    
    printList(&head);
    

    return 0;
}
