/******************************************************************************

                     Find Nth element from the last using a Map

*******************************************************************************/

#include <iostream>
#include <map>

using namespace std;

struct Node {
    int data;
    Node *next;
};

void insertAtEnd(Node **head, int data) {
    Node *node = (struct Node *)malloc(sizeof(Node));
    node->data = data;
    node->next = NULL;
    if (*head == NULL) {
        *head = node;
        return;
    }
    else {
        Node *curr = *head;
        while (curr->next) {
            curr = curr->next;
        }
        curr->next = node;
    }
    return;
}

void findNthElementfromEndUsingMap(Node **head, int n, map<int, int> &mp) {
    Node *curr = *head;
    if (NULL == curr) {
        cout << "Empty list" << endl;
        return;
    }
    int i = 0;
    while (curr) {
        mp.insert(pair<int, int> (i, curr->data));
        curr = curr->next;
        i++;
    }
    
    cout << mp.find(i-n)->second;
    
//    map <int, int>::iterator it = mp.begin();
//    while (it != mp.end()) {
//        cout << "Key: " << it->first << ":: Value: " << it->second << endl;
//        it++;
//    }
    return;
}

void printList(Node **head) {
    Node *curr = *head;
    if (curr == NULL) {
        cout << "List is Empty!!" << endl;
    }
    else {
        while (curr) {
            cout << curr->data << " ";
            curr = curr->next;
        }
    }
}
int main()
{
    Node *head = NULL;
    map<int, int> mp;
    insertAtEnd(&head, 4);
    insertAtEnd(&head, 5);
    insertAtEnd(&head, 6);
    insertAtEnd(&head, 7);
    insertAtEnd(&head, 8);
    
    findNthElementfromEndUsingMap(&head, 4, mp);
    
 //   printList(&head);
    

    return 0;
}
